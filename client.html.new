<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bibliothèquos</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;,">
    
    <!-- Bibliothèques externes -->
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <!-- Styles CSS -->
    <style>
        body {
            background: #f4f1ea;
            font-family: sans-serif;
            margin: 20px;
        }
        
        text {
            font-size: 12px;
            fill: #333;
        }

        #joueurs {
            margin-bottom: 20px;
        }

        #messages {
            width: 100%;
            margin-top: 10px;
        }

        .message-input {
            width: 80%;
            margin-top: 10px;
        }

        hr {
            margin: 15px 0;
        }

        .selected {
            stroke: #ff0000;
            stroke-width: 2px;
        }
    </style>

    <!-- Scripts -->
    <script>
        // Initialisation Socket.IO
        const socket = io();

        // ====================================
        // 1. Gestion de la bibliothèque
        // ====================================
        let livres = [];
        
        // Chargement des livres depuis le fichier JSON
        function chargerLivres() {
            fetch("livres.json")
                .then(response => response.json())
                .then(data => {
                    livres = data;
                    console.log("Fichier JSON chargé :", livres);
                    initialiserBibliotheque();
                })
                .catch(err => console.error("Erreur JSON :", err));
        }

        // ====================================
        // 2. Gestion des joueurs
        // ====================================
        let numJoueur = -1;

        function demandeJoueurs() {
            console.log('Demande des joueurs');
            socket.emit('joueurs');
        }

        function entrerDansLaPartie() {
            let nom = nomJ.value;
            if (nom && nom.trim()) {
                console.log("Entrée de " + nom);
                socket.emit('entree', nom);
            }
        }

        function quitterLaPartie() {
            let nom = nomJ.value;
            if (nom && nom.trim()) {
                console.log("Sortie de " + nom);
                socket.emit('sortie', nom);
            }
        }

        // ====================================
        // 3. Gestion du chat
        // ====================================
        function envoiMessage(input) {
            if (input.value.trim()) {
                console.log("Envoi du message :", input.value);
                socket.emit("message", {
                    'numJoueur': numJoueur,
                    'texte': input.value
                });
            }
        }

        function ajouterMessage(message) {
            let textarea = document.getElementById('messages');
            textarea.value += (textarea.value ? '\n' : '') + message;
            textarea.scrollTop = textarea.scrollHeight;
        }

        // ====================================
        // 4. Écouteurs Socket.IO
        // ====================================
        
        // Événements liés aux joueurs
        socket.on('joueurs', nomsJoueurs => {
            console.log(`Noms des joueurs reçus du serveur : ${nomsJoueurs}`);
            listeJoueurs.value = nomsJoueurs;
        });

        socket.on('entree', data => {
            console.log("Le serveur confirme mon entrée avec numJoueur=" + data.numJoueur);
            numJoueur = data.numJoueur;
            btentree.disabled = true;
            btsortie.disabled = false;
            listeJoueurs.textContent = data.nomsJoueurs;
            numJ.textContent = data.numJoueur;
        });

        socket.on('entreeAutreJoueur', data => {
            console.log("Le serveur confirme l'entrée de " + data.nomJoueur);
            ajouterMessage(`${data.nomJoueur} a rejoint la partie`);
            listeJoueurs.textContent = data.nomsJoueurs;
        });

        socket.on('sortie', data => {
            console.log("Le serveur confirme ma sortie");
            numJoueur = -1;
            nomJ.value = "";
            numJ.textContent = "";
            btentree.disabled = false;
            btsortie.disabled = true;
            listeJoueurs.textContent = data.nomsJoueurs;
            document.getElementById('messageServeur').textContent = "";
        });

        socket.on('sortieAutreJoueur', data => {
            console.log(`Le serveur confirme la sortie de ${data.nomJoueur} de numéro ${data.numJoueur}`);
            if (numJoueur > data.numJoueur) {
                numJoueur--;
                numJ.textContent = numJoueur;
            }
            ajouterMessage(`${data.nomJoueur} a quitté la partie`);
            listeJoueurs.textContent = data.nomsJoueurs;
            document.getElementById('messageServeur').textContent = "";
        });

        socket.on('message', message => {
            console.log("Réception du message :", message);
            ajouterMessage(message);
            document.getElementById('message').value = "";
        });

        socket.on('messageServeur', message => {
            console.log("Message serveur :", message);
            document.getElementById('messageServeur').textContent = message;
        });

        // ====================================
        // 5. Visualisation D3.js
        // ====================================
        
        // Configuration de la visualisation
        const largeurLivre = 40;
        const hauteurLivre = 80;
        const marge = 10;
        const nbEtagere = 4;
        const nbAncrages = 6;
        const largeurEtagere = nbAncrages * (largeurLivre + marge);
        const couleurLivre = "#00008B";
        const yBase = 100;
        let livreSelec = null;

        // Configuration des étagères
        const etageres = [];
        for (let i = 0; i < nbEtagere; i++) {
            etageres.push({
                id: i,
                y: 70 + i * 120,
                ancrages: [],
                livres: []
            });
        }

        // Configuration de la caisse
        const caisse = {
            id: "caisse",
            x: 500,
            y: 500,
            nbAncrages: 3,
            ancrage: [],
            livres: []
        };

        function dessinerEtageres() {
            const svg = d3.select("#bibliotheque");
            svg.selectAll(".etagere")
                .data(etageres)
                .enter()
                .append("rect")
                .attr("class", "etagere")
                .attr("x", 50)
                .attr("y", d => d.y)
                .attr("width", largeurEtagere + marge)
                .attr("height", 10)
                .attr("fill", "#8b5a2b");
        }

        function dessinerAncrages() {
            const svg = d3.select("#bibliotheque");
            etageres.forEach(et => {
                for (let i = 0; i < nbAncrages; i++) {
                    const ancrX = 50 + i * (largeurLivre + marge) + largeurLivre / 2;
                    const ancrY = et.y;
                    
                    et.ancrages.push({x: ancrX, y: ancrY, pleins: false});
                    
                    svg.append("circle")
                        .attr("cx", ancrX)
                        .attr("cy", ancrY)
                        .attr("r", 3)
                        .attr("fill", "#515151")
                        .on("click", () => {
                            if (livreSelec) {
                                depoLivre(et, i);
                            }
                        });
                }
            });
        }

        function dessinerCaisse() {
            const svg = d3.select("#bibliotheque");
            svg.append("rect")
                .attr("class", "caisse")
                .attr("x", caisse.x)
                .attr("y", caisse.y)
                .attr("width", caisse.nbAncrages * (largeurLivre + marge))
                .attr("height", 10)
                .attr("fill", "#b87333");

            for (let i = 0; i < caisse.nbAncrages; i++) {
                const ancrX = caisse.x + i * (largeurLivre + marge) + largeurLivre / 2;
                const ancrY = caisse.y;

                caisse.ancrage.push({ x: ancrX, y: ancrY, pleins: false });

                svg.append("circle")
                    .attr("cx", ancrX)
                    .attr("cy", ancrY)
                    .attr("r", 3)
                    .attr("fill", "#515151")
                    .attr("cursor", "pointer")
                    .on("click", () => {
                        if (livreSelec) {
                            depoLivre(caisse, i);
                        }
                    });
            }
        }

        function remplirCaisse() {
            const svg = d3.select("#bibliotheque");
            const random_elem = d3.shuffle(livres).slice(0, 3);

            random_elem.forEach((li, i) => {
                const ancrage = caisse.ancrage[i];
                svg.append("rect")
                    .attr("class", "livre")
                    .attr("x", ancrage.x - largeurLivre/2)
                    .attr("y", ancrage.y - hauteurLivre)
                    .attr("width", largeurLivre)
                    .attr("height", hauteurLivre)
                    .attr("fill", couleurLivre)
                    .on("mouseover", function(event) {
                        svg.append("text")
                            .attr("id", "titre_temp")
                            .attr("x", parseFloat(d3.select(this).attr("x")) + largeurLivre / 2)
                            .attr("y", ancrage.y - hauteurLivre - 10)
                            .text(li.titre);
                    })
                    .on("mouseout", function() {
                        svg.select("#titre_temp").remove();
                    })
                    .on("click", function() {
                        svg.selectAll(".livre").classed("selected", false);
                        d3.select(this).classed("selected", true);
                        livreSelec = this;
                    });
            });
        }

        function depoLivre(etagere, indexAncrage) {
            const ancrage = etagere.ancrages[indexAncrage];

            if (ancrage.pleins) 
                return;

            if (livreSelec.ancrage)
                livreSelec.ancrage.pleins = false;

            d3.select(livreSelec)
                .attr("x", ancrage.x - largeurLivre / 2)
                .attr("y", ancrage.y - hauteurLivre)
                .on("end", () => {
                    ancrage.pleins = true;
                    livreSelec.ancrage = ancrage;
                    livreSelec = null;
                });
        }

        function initialiserBibliotheque() {
            dessinerEtageres();
            dessinerAncrages();
            dessinerCaisse();
            remplirCaisse();
        }

        // Chargement initial
        document.addEventListener('DOMContentLoaded', chargerLivres);
    </script>
</head>

<body>
    <!-- Section des joueurs -->
    <div id="joueurs">
        <div>
            Joueurs : <label id="listeJoueurs"></label>
        </div>
        <div style="margin-top: 10px;">
            Votre nom <input id="nomJ" type="text" />
            Votre numéro : <label id="numJ"></label>
            <button type="button" id="btentree" onclick="entrerDansLaPartie()">
                Entrer dans la partie
            </button>
            <button type="button" id="btsortie" disabled onclick="quitterLaPartie()">
                Quitter la partie
            </button>
        </div>
    </div>

    <hr/>
    
    <!-- Message du serveur -->
    <div>
        Message du serveur : <label id="messageServeur"></label>
    </div>
    
    <hr/>

    <!-- Section chat -->
    <div>
        <div>
            Votre message <input id="message" type="text" class="message-input" onchange="envoiMessage(this)"/>
        </div>
        <textarea id="messages" rows="20" cols="75" readonly></textarea>
    </div>

    <!-- Visualisation de la bibliothèque -->
    <svg id="bibliotheque" width="600" height="600"></svg>
</body>
</html>